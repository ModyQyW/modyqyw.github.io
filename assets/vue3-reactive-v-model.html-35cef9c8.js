import{_ as e,M as p,p as o,q as c,R as s,t as l,N as a,a1 as t}from"./framework-7db056f4.js";const r={},i=t(`<h1 id="vue3-reactive-v-model-双向绑定" tabindex="-1"><a class="header-anchor" href="#vue3-reactive-v-model-双向绑定" aria-hidden="true">#</a> vue3 reactive + v-model 双向绑定</h1><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;</span><span style="color:#7EE787;">el-form</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">el-form-item</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">el-input</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">v-model</span><span style="color:#C9D1D9;">=</span><span style="color:#C9D1D9;">&quot;</span><span style="color:#C9D1D9;">filter.a</span><span style="color:#C9D1D9;">&quot;</span><span style="color:#C9D1D9;"> /&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">el-form-item</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">el-form-item</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">el-button</span><span style="color:#C9D1D9;"> @</span><span style="color:#79C0FF;">click</span><span style="color:#C9D1D9;">=</span><span style="color:#C9D1D9;">&quot;</span><span style="color:#C9D1D9;">handleEmit</span><span style="color:#C9D1D9;">&quot;</span><span style="color:#C9D1D9;">&gt;ok&lt;/</span><span style="color:#7EE787;">el-button</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">el-form-item</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;/</span><span style="color:#7EE787;">el-form</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">setup</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">lang</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;ts&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { reactive } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;vue&#39;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D2A8FF;">defineOptions</span><span style="color:#C9D1D9;">({</span></span>
<span class="line"><span style="color:#C9D1D9;">  name: </span><span style="color:#A5D6FF;">&#39;FilterForm&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">});</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">props</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">withDefaults</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#D2A8FF;">defineProps</span><span style="color:#C9D1D9;">&lt;{</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FFA657;">modelValue</span><span style="color:#FF7B72;">?:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Record</span><span style="color:#C9D1D9;">&lt;</span><span style="color:#79C0FF;">string</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">string</span><span style="color:#C9D1D9;">&gt;;</span></span>
<span class="line"><span style="color:#C9D1D9;">  }&gt;(),</span></span>
<span class="line"><span style="color:#C9D1D9;">  {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#D2A8FF;">modelValue</span><span style="color:#C9D1D9;">: () </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> ({}),</span></span>
<span class="line"><span style="color:#C9D1D9;">  },</span></span>
<span class="line"><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">emit</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">defineEmits</span><span style="color:#C9D1D9;">&lt;{</span></span>
<span class="line"><span style="color:#C9D1D9;">  (</span><span style="color:#FFA657;">event</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;update:modelValue&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">modelValue</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Record</span><span style="color:#C9D1D9;">&lt;</span><span style="color:#79C0FF;">string</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">string</span><span style="color:#C9D1D9;">&gt;)</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">void</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">// 根据传入值初始化</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">filter</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">reactive</span><span style="color:#C9D1D9;">({</span></span>
<span class="line"><span style="color:#C9D1D9;">  a: props.modelValue?.a </span><span style="color:#FF7B72;">??</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">// 提交</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">handleEmit</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> () </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#D2A8FF;">emit</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;update:modelValue&#39;</span><span style="color:#C9D1D9;">, filter);</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个组件想要通过 <code>v-model</code> 双向绑定一个对象，点按钮的时候再更新 <code>modelValue</code>。</p><p>问题出在调用上。我在调用时，直接传递了一个 <code>reactive</code>。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;</span><span style="color:#7EE787;">filter-form</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">v-model</span><span style="color:#C9D1D9;">=</span><span style="color:#C9D1D9;">&quot;</span><span style="color:#C9D1D9;">filter</span><span style="color:#C9D1D9;">&quot;</span><span style="color:#C9D1D9;"> /&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">setup</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">lang</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;ts&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { reactive } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;vue&#39;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">filter</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">reactive</span><span style="color:#C9D1D9;">({ a: </span><span style="color:#A5D6FF;">&#39;&#39;</span><span style="color:#C9D1D9;">, b: </span><span style="color:#A5D6FF;">&#39;&#39;</span><span style="color:#C9D1D9;"> });</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们都知道，vue2 选项式 API 的时候，直接通过 <code>v-model</code> 双向绑定一个对象不是什么大问题。但在 vue3 组合式 API，你无法直接修改一个响应式对象，即使这个响应式对象是用 <code>let</code> 声明的也不行。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#8B949E;">// ×</span></span>
<span class="line"><span style="color:#C9D1D9;">filter </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">reactive</span><span style="color:#C9D1D9;">({ a: </span><span style="color:#A5D6FF;">&#39;a&#39;</span><span style="color:#C9D1D9;">, b: </span><span style="color:#A5D6FF;">&#39;b&#39;</span><span style="color:#C9D1D9;"> });</span></span>
<span class="line"><span style="color:#8B949E;">// √</span></span>
<span class="line"><span style="color:#C9D1D9;">filter.a </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;a&#39;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">filter.b </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;b&#39;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这部分原理在 vue3 官方文档里说得很清楚。摘录如下：</p><blockquote><p>因为 Vue 的响应式系统是通过 property 访问进行追踪的，因此我们必须始终保持对该响应式对象的相同引用。这意味着我们不可以随意地 “替换” 一个响应式对象。</p></blockquote><p><code>emit</code> 提交了一个新的对象，没有保持相同引用，所以无法触发响应式系统，表现出 <code>v-model</code> 失效了一样。解决方法还挺简单的，换成 <code>ref</code> 就行了。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;</span><span style="color:#7EE787;">filter-form</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">v-model</span><span style="color:#C9D1D9;">=</span><span style="color:#C9D1D9;">&quot;</span><span style="color:#C9D1D9;">filter</span><span style="color:#C9D1D9;">&quot;</span><span style="color:#C9D1D9;"> /&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">setup</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">lang</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;ts&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { ref } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;vue&#39;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">filter</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ref</span><span style="color:#C9D1D9;">({ a: </span><span style="color:#A5D6FF;">&#39;&#39;</span><span style="color:#C9D1D9;">, b: </span><span style="color:#A5D6FF;">&#39;&#39;</span><span style="color:#C9D1D9;"> });</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新时等同于修改 <code>.value</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">filter.value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> newFilter;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你正在烦恼 <code>.value</code> 的问题，你应该看看响应性语法糖 <code>reactivity transform</code>，它完美地解决了这个问题。</p><p>参考链接如下：</p>`,15),D={href:"https://vuejs.org/guide/essentials/reactivity-fundamentals.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://vuejs.org/guide/extras/reactivity-in-depth.html",target:"_blank",rel:"noopener noreferrer"};function d(v,C){const n=p("ExternalLinkIcon");return o(),c("div",null,[i,s("ul",null,[s("li",null,[s("a",D,[l("Reactivity Fundamentals"),a(n)])]),s("li",null,[s("a",y,[l("Reactivity in Depth"),a(n)])])])])}const u=e(r,[["render",d],["__file","vue3-reactive-v-model.html.vue"]]);export{u as default};
