import{_ as s,p as n,q as a,a1 as l}from"./framework-7db056f4.js";const e={},p=l(`<h1 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h1><h2 id="模块-module" tabindex="-1"><a class="header-anchor" href="#模块-module" aria-hidden="true">#</a> 模块 module</h2><p>任何文件都可以被 <code>webpack</code> 解析成模块 <code>module</code>。<code>webpack</code> 本身支持解析某些文件，而 <code>webpack</code> 本身不支持解析的，需要使用工具来帮助解析。</p><h2 id="入口-entry" tabindex="-1"><a class="header-anchor" href="#入口-entry" aria-hidden="true">#</a> 入口 entry</h2><p><code>entry</code> 指定 <code>webpack</code> 工作的时候从哪个文件开始分析依赖，默认值是 <code>\${PROJECT_DIR}/src/index.js</code>。这个文件也会被叫做入口文件或者入口模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#8B949E;">// 使用 path 模块来指定路径</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">path</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">require</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;path&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79C0FF;">module</span><span style="color:#C9D1D9;">.</span><span style="color:#79C0FF;">exports</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 entry 为 \${PROJECT_DIR}/src/app.js</span></span>
<span class="line"><span style="color:#C9D1D9;">  entry: path.</span><span style="color:#D2A8FF;">resolve</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;src&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;app.js&#39;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>path</code> 是 node 的内置模块，我们可以在 <code>webpack</code> 的配置文件里使用 <code>require</code> 语句引用这个模块。</li><li><code>module.exports</code> 用于导出配置。</li><li><code>path.resolve</code> 是 <code>path</code> 模块内置的方法，它能将提供的字符串参数拼接成一个绝对路径，来指定 <code>entry</code> 的值。</li></ul><p><code>path.join</code> 也较为常用，它和 <code>path.resolve</code> 用法、作用相似，两者之间的主要区别是 <code>path.join</code> 仅仅拼接给出的字符串然后返回一个字符串（可能无意义，取决于给出的字符串），而 <code>path.resolve</code> 会解析然后返回一个绝对路径。</p><p>下面是两个对比示例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">path.</span><span style="color:#D2A8FF;">join</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;/a&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;/b&#39;</span><span style="color:#C9D1D9;">); </span><span style="color:#8B949E;">// string /a/b</span></span>
<span class="line"><span style="color:#C9D1D9;">path.</span><span style="color:#D2A8FF;">resolve</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;/a&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;/b&#39;</span><span style="color:#C9D1D9;">); </span><span style="color:#8B949E;">// string /b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">path.</span><span style="color:#D2A8FF;">join</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;a&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;b1&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;..&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;b2&#39;</span><span style="color:#C9D1D9;">); </span><span style="color:#8B949E;">// string a/b2</span></span>
<span class="line"><span style="color:#C9D1D9;">path.</span><span style="color:#D2A8FF;">resolve</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;a&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;b1&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;..&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;b2&#39;</span><span style="color:#C9D1D9;">); </span><span style="color:#8B949E;">// string \${PROJECT_DIR}/a/b2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="输出-output" tabindex="-1"><a class="header-anchor" href="#输出-output" aria-hidden="true">#</a> 输出 output</h2><p><code>output</code> 可以指定 <code>webpack</code> 存放所有输出文件的基本路径 <code>output.path</code>，还有 <code>entry</code> 对应的输出文件的路径和文件名 <code>output.filename</code>。</p><p><code>entry</code> 对应的输出文件默认是 <code>\${PROJECT_DIR}/dist/main.js</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#8B949E;">// 使用 path 模块来指定路径</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">path</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">require</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;path&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79C0FF;">module</span><span style="color:#C9D1D9;">.</span><span style="color:#79C0FF;">exports</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 entry 是 \${PROJECT_DIR}/src/app.js</span></span>
<span class="line"><span style="color:#C9D1D9;">  entry: path.</span><span style="color:#D2A8FF;">resolve</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;src&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;app.js&#39;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 output 目录是 \${PROJECT_DIR}/dist</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 entry 对应的输出文件是 \${PROJECT_DIR}/dist/bundle.js</span></span>
<span class="line"><span style="color:#C9D1D9;">  output: {</span></span>
<span class="line"><span style="color:#C9D1D9;">    path: path.</span><span style="color:#D2A8FF;">resolve</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;dist&#39;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">    filename: </span><span style="color:#A5D6FF;">&#39;bundle.js&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  },</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果指定 <code>output.filename = &#39;js/bundle.js&#39;</code>，那么 <code>entry</code> 对应的输出文件是 <code>\${PROJECT_DIR}/dist/js/bundle.js</code>。</p><h2 id="加载器-loader" tabindex="-1"><a class="header-anchor" href="#加载器-loader" aria-hidden="true">#</a> 加载器 loader</h2><p><code>webpack</code> 本身只能处理 <code>.js</code> 和 <code>.json</code> 文件，<code>loader</code> 增强了 <code>webpack</code> 的解析能力，使得 <code>webpack</code> 能够处理 <code>.jsx</code>，<code>.ts</code>，<code>.tsx</code>，<code>.css</code> 等文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#8B949E;">// 使用 path 模块来指定路径</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">path</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">require</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;path&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79C0FF;">module</span><span style="color:#C9D1D9;">.</span><span style="color:#79C0FF;">exports</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 entry 为 \${PROJECT_DIR}/src/app.js</span></span>
<span class="line"><span style="color:#C9D1D9;">  entry: path.</span><span style="color:#D2A8FF;">resolve</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;src&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;app.js&#39;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 output 目录为 \${PROJECT_DIR}/dist</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 entry 对应的输出文件为 \${PROJECT_DIR}/dist/bundle.js</span></span>
<span class="line"><span style="color:#C9D1D9;">  output: {</span></span>
<span class="line"><span style="color:#C9D1D9;">    path: path.</span><span style="color:#D2A8FF;">resolve</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;dist&#39;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">    filename: </span><span style="color:#A5D6FF;">&#39;bundle.js&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  },</span></span>
<span class="line"><span style="color:#C9D1D9;">  module: {</span></span>
<span class="line"><span style="color:#C9D1D9;">    rules: [</span></span>
<span class="line"><span style="color:#C9D1D9;">      {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// png 文件</span></span>
<span class="line"><span style="color:#C9D1D9;">        test:</span><span style="color:#A5D6FF;"> /</span><span style="color:#7EE787;font-style:italic;">\\.</span><span style="color:#A5D6FF;">png</span><span style="color:#FF7B72;">$</span><span style="color:#A5D6FF;">/</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// 使用 url-loader 处理</span></span>
<span class="line"><span style="color:#C9D1D9;">        use: </span><span style="color:#A5D6FF;">&#39;url-loader&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">      },</span></span>
<span class="line"><span style="color:#C9D1D9;">    ],</span></span>
<span class="line"><span style="color:#C9D1D9;">  },</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>module.rules</code> 数组里面的每一个元素都是处理模块的规则。</li><li>每一个元素都是对象 object，有两个必需的属性。 <ul><li>一个必需的属性是 <code>test</code>，用来指定需要解析的文件，它的值往往是一个正则表达式。</li><li>另一个必需的属性是 <code>use</code>，指定用来解析文件的 <code>loader</code>。</li></ul></li></ul><p>有的 <code>loader</code> 还会关联 <code>plugin</code> 或者有额外的属性供你配置，具体信息要查看对应 <code>loader</code> 的文档。</p><h2 id="插件-plugin" tabindex="-1"><a class="header-anchor" href="#插件-plugin" aria-hidden="true">#</a> 插件 plugin</h2><p><code>plugin</code>被用来执行范围更广的任务，比如打包优化，资源管理，注入环境变量等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#8B949E;">// 使用 path 模块来指定路径</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">path</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">require</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;path&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> { </span><span style="color:#79C0FF;">BundleAnalyzerPlugin</span><span style="color:#C9D1D9;"> } </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">require</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;webpack-bundle-analyzer&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79C0FF;">module</span><span style="color:#C9D1D9;">.</span><span style="color:#79C0FF;">exports</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 entry 为 \${PROJECT_DIR}/src/app.js</span></span>
<span class="line"><span style="color:#C9D1D9;">  entry: path.</span><span style="color:#D2A8FF;">resolve</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;src&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;app.js&#39;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 output 目录为 \${PROJECT_DIR}/dist</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 entry 对应的输出文件为 \${PROJECT_DIR}/dist/bundle.js</span></span>
<span class="line"><span style="color:#C9D1D9;">  output: {</span></span>
<span class="line"><span style="color:#C9D1D9;">    path: path.</span><span style="color:#D2A8FF;">resolve</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;dist&#39;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">    filename: </span><span style="color:#A5D6FF;">&#39;bundle.js&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  },</span></span>
<span class="line"><span style="color:#C9D1D9;">  module: {</span></span>
<span class="line"><span style="color:#C9D1D9;">    rules: [</span></span>
<span class="line"><span style="color:#C9D1D9;">      {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// png 文件</span></span>
<span class="line"><span style="color:#C9D1D9;">        test:</span><span style="color:#A5D6FF;"> /</span><span style="color:#7EE787;font-style:italic;">\\.</span><span style="color:#A5D6FF;">png</span><span style="color:#FF7B72;">$</span><span style="color:#A5D6FF;">/</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// 使用 url-loader 处理</span></span>
<span class="line"><span style="color:#C9D1D9;">        use: </span><span style="color:#A5D6FF;">&#39;url-loader&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">      },</span></span>
<span class="line"><span style="color:#C9D1D9;">    ],</span></span>
<span class="line"><span style="color:#C9D1D9;">  },</span></span>
<span class="line"><span style="color:#C9D1D9;">  plugins: [</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">// 分析生成包大小</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">BundleAnalyzerPlugin</span><span style="color:#C9D1D9;">({</span></span>
<span class="line"><span style="color:#C9D1D9;">      analyzerMode: </span><span style="color:#A5D6FF;">&#39;static&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">      defaultSizes: </span><span style="color:#A5D6FF;">&#39;stat&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">      openAnalyzer: </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">    }),</span></span>
<span class="line"><span style="color:#C9D1D9;">  ],</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模式-mode" tabindex="-1"><a class="header-anchor" href="#模式-mode" aria-hidden="true">#</a> 模式 mode</h2><p>指定不同的模式，<code>webpack</code> 会自动启用不同的优化。</p><p>模式一共有三种：<code>production</code>（生产模式），<code>development</code>（开发模式），<code>none</code>（无优化模式），默认值是<code>production</code>，优化程度由高到低依次是 <code>production</code>，<code>development</code>，<code>none</code>。</p><p><code>none</code> 不会启用优化，我们一般不会去用它。而 <code>production</code> 和 <code>development</code> 的默认优化往往不能满足项目要求，我们还要进一步定制。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#8B949E;">// 使用 path 模块来指定路径</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">path</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">require</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;path&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">BundleAnalyzerPlugin</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">require</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;webpack-bundle-analyzer&#39;</span><span style="color:#C9D1D9;">).BundleAnalyzerPlugin;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79C0FF;">module</span><span style="color:#C9D1D9;">.</span><span style="color:#79C0FF;">exports</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 mode 为 development，即开发模式</span></span>
<span class="line"><span style="color:#C9D1D9;">  mode: </span><span style="color:#A5D6FF;">&#39;development&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 entry 为 \${PROJECT_DIR}/src/app.js</span></span>
<span class="line"><span style="color:#C9D1D9;">  entry: path.</span><span style="color:#D2A8FF;">resolve</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;src&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;app.js&#39;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 output 目录为 \${PROJECT_DIR}/dist</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 指定 entry 对应的输出文件为 \${PROJECT_DIR}/dist/bundle.js</span></span>
<span class="line"><span style="color:#C9D1D9;">  output: {</span></span>
<span class="line"><span style="color:#C9D1D9;">    path: path.</span><span style="color:#D2A8FF;">resolve</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;dist&#39;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">    filename: </span><span style="color:#A5D6FF;">&#39;bundle.js&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  },</span></span>
<span class="line"><span style="color:#C9D1D9;">  module: {</span></span>
<span class="line"><span style="color:#C9D1D9;">    rules: [</span></span>
<span class="line"><span style="color:#C9D1D9;">      {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// png 文件</span></span>
<span class="line"><span style="color:#C9D1D9;">        test:</span><span style="color:#A5D6FF;"> /</span><span style="color:#7EE787;font-style:italic;">\\.</span><span style="color:#A5D6FF;">png</span><span style="color:#FF7B72;">$</span><span style="color:#A5D6FF;">/</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// 使用 url-loader 处理</span></span>
<span class="line"><span style="color:#C9D1D9;">        use: </span><span style="color:#A5D6FF;">&#39;url-loader&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">      },</span></span>
<span class="line"><span style="color:#C9D1D9;">    ],</span></span>
<span class="line"><span style="color:#C9D1D9;">  },</span></span>
<span class="line"><span style="color:#C9D1D9;">  plugins: [</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">// 分析生成包大小</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">BundleAnalyzerPlugin</span><span style="color:#C9D1D9;">({</span></span>
<span class="line"><span style="color:#C9D1D9;">      analyzerMode: </span><span style="color:#A5D6FF;">&#39;static&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">      defaultSizes: </span><span style="color:#A5D6FF;">&#39;stat&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">      openAnalyzer: </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">    }),</span></span>
<span class="line"><span style="color:#C9D1D9;">  ],</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="module-chunk-bundle" tabindex="-1"><a class="header-anchor" href="#module-chunk-bundle" aria-hidden="true">#</a> module，chunk，bundle</h2><p><code>bundle</code> 是最终输出的一个或多个文件，也就是最终得到的代码块，或者叫做构建包。</p><p><code>chunk</code> 则是构建过程中的代码块，它是一些 <code>module</code> 的封装，也可以叫做这些 <code>module</code> 的集合。构建结束后，<code>chunk</code> 就表现为 <code>bundle</code>。但为了方便区分，一般会在一些文件的文件名里使用 <code>chunk</code>。</p><p>一个 <code>entry</code> 会对应一个或者多个 <code>chunk</code>，但最终只会生成一个 <code>bundle</code>，这个 <code>bundle</code> 一般会包含多个文件。</p>`,32),o=[p];function c(r,i){return n(),a("div",null,o)}const d=s(e,[["render",c],["__file","04.basic-concepts.html.vue"]]);export{d as default};
